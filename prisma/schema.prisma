// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  username    String    @unique
  email       String    @unique 
  password    String
  usernameUpdatedAt DateTime?
  blogs       Blog[]
  comments    Comment[]
  likes       Like[]
  deletedAt   DateTime?
}

model Blog {
  id          Int         @id @default(autoincrement())
  title       String
  content     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
  authorId    Int
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categories  Category[]
  comments    Comment[]
  likes       Like[]
}

model Category {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  blogs       Blog[]
  deletedAt   DateTime?
}

model Comment {
  id          Int         @id @default(autoincrement())
  content     String
  createdAt   DateTime    @default(now())
  authorId    Int
  blogId      Int
  user        User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  blog        Blog        @relation(fields: [blogId], references: [id], onDelete: Cascade)
  deletedAt   DateTime?
}

model Like {
  id          Int         @id @default(autoincrement())
  userId      Int
  blogId      Int
  blog        Blog        @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([blogId, userId])
}